package com.hof.PipedriveConnector;

import com.hof.pool.DBType;
import com.hof.pool.JDBCMetaData;

public class PipedriveSourceMetaData extends JDBCMetaData {

	public PipedriveSourceMetaData() {
		
		super();
		
		sourceName = PipedriveDataZoom.getText("Pipedrive Data Source", "mi.text.pipedrive.datasource.name");
		sourceCode = "PIPEDRIVE_DATA_SOURCE";
		driverName = "com.hof.PipedriveConnector.PipedriveDataSource";
		sourceType = DBType.THIRD_PARTY;
	}
		
	public  void initialiseParameters() 
	 {
	        super.initialiseParameters();
	        
	        
	        String inst = PipedriveDataZoom.getText("1. Click the 'Authorize Pipedrive' button.", "mi.text.pipedrive.connection.instructions.line1")+"<br>"
	        			+ PipedriveDataZoom.getText("2. You will be redirected to a web page. Add your User Name and Password and Click 'Sign In'.","mi.text.pipedrive.connection.instructions.line2") +"<br>"
	        			+ PipedriveDataZoom.getText("3. Copy and paste the TOKEN into the Authentication Token field in Yellowfin.","mi.text.pipedrive.connection.instructions.line3")+"<br>";
	        addParameter(new Parameter("HELP", PipedriveDataZoom.getText("Connection Instructions","mi.text.pipedrive.connection.instructions.label"),  inst, TYPE_NUMERIC, DISPLAY_STATIC_TEXT, null, true));
	        Parameter p = new Parameter("URL", PipedriveDataZoom.getText("1. Request Authentication Token", "mi.text.pipedrive.connection.request.pin.button.label"), PipedriveDataZoom.getText("Connect to Pipedrive for Authentication Key","mi.text.pipedrive.connection.request.pin.button.description"),TYPE_UNKNOWN, DISPLAY_URLBUTTON,  null, true);
	        p.addOption("BUTTONTEXT", PipedriveDataZoom.getText("Authorize Pipedrive","mi.text.pipedrive.connection.request.pin.button.text"));
	        p.addOption("BUTTONURL", "https://app.pipedrive.com/auth/login?return_url=https%3A%2F%2Faptusdatalabs.pipedrive.com%2Fsettings%23api");
	        this.addParameter(p);
	        addParameter(new Parameter("KEY",PipedriveDataZoom.getText("2. Enter Authentication Token", "mi.text.pipedrive.connection.request.pin.field.label"),PipedriveDataZoom.getText("Enter Authentication Key to received from Pipedrive","mi.text.pipedrive.connection.request.pin.field.description"), TYPE_PASSWORD, DISPLAY_PASSWORD, null, true));
	        addParameter(new Parameter("MREC",PipedriveDataZoom.getText("3. Enter Max Records", "mi.text.pipedrive.max.records"),PipedriveDataZoom.getText("Enter the maximum number of records", "mi.text.pipedrive.max.records.instruction"), TYPE_NUMERIC, DISPLAY_TEXT_MED, null, true));
	 }	    
	   
	 public String buttonPressed(String buttonName) throws Exception 
	 {    
      /*In this function you should define the actions that should be performed in case if some button was pressed. 
       *String buttonName contains the ID of the button that was pressed */
		 return null;
	 }
	 
	 @Override
		public byte[] getDatasourceIcon() {
		 /*This function should return Base-64 encrypted version of icon file*/
			String str = "";
			return str.getBytes();
		}
	    
		
		@Override
		public String getDatasourceShortDescription(){
			return PipedriveDataZoom.getText("Connect to Pipedrive","mi.text.pipedrive.short.description");
		}

		@Override
		public String getDatasourceLongDescription(){
			return PipedriveDataZoom.getText("Connect to Your Pipedrive Account and visualize your pipedrive data using Yellowfin advanced reporting services.","mi.text.pipedrive.long.description");
}
	
}